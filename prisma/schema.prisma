// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id Int @id @default(autoincrement())
  phone String? @unique
  email String? @unique
  name String
  avatar String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens Token[]
  products Product[]
  fav Fav[]
  posts Post[]
  answers Answer[]
  wonderings Wondering[]
}

model Token {
  id Int @id @default(autoincrement())
  payload String @unique
  user User @relation(fields: [userId], references: [id], onDelete:Cascade )
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

model Product {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete:Cascade )
  userId Int
  @@index([userId])
  image String
  name String
  price Int
  description String @db.MediumText
  favs Fav[]
}

model Fav {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete:Cascade )
  userId Int
  @@index([userId])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  @@index([productId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete:Cascade )
  userId Int
  @@index([userId])
  question String @db.MediumText
  latitude Float?
  longitude Float?
  answers Answer[]
  wondering Wondering[]
}

model Answer {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete:Cascade )
  userId Int
  @@index([userId])
  post Post @relation(fields: [postId], references: [id], onDelete:Cascade )
  postId Int
  @@index([postId])
  answer String @db.MediumText
}

model Wondering {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete:Cascade )
  userId Int
  @@index([userId])
  post Post @relation(fields: [postId], references: [id], onDelete:Cascade )
  postId Int
  @@index([postId])
}